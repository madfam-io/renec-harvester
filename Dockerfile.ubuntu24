# Multi-stage Dockerfile for RENEC Harvester - Ubuntu 24.04 optimized
FROM ubuntu:24.04 as base

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Set Python environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8

# Install Python 3.11 and system dependencies
RUN apt-get update && apt-get install -y \
    python3.11 \
    python3.11-venv \
    python3.11-dev \
    python3-pip \
    gcc \
    g++ \
    make \
    curl \
    wget \
    gnupg \
    ca-certificates \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create Python 3.11 symlinks
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1 \
    && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1

# Upgrade pip
RUN python -m pip install --upgrade pip setuptools wheel

# Create app user
RUN groupadd -r harvester && useradd -r -g harvester harvester

# Set work directory
WORKDIR /app

# Install Python dependencies
COPY requirements.txt requirements-dev.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# Install Playwright dependencies for Ubuntu 24.04
# Using the t64 variants of libraries where applicable
RUN apt-get update && apt-get install -y \
    libnss3 \
    libnspr4 \
    libatk1.0-0 \
    libatk-bridge2.0-0 \
    libcups2 \
    libdrm2 \
    libdbus-1-3 \
    libatspi2.0-0 \
    libx11-6 \
    libxcomposite1 \
    libxdamage1 \
    libxext6 \
    libxfixes3 \
    libxrandr2 \
    libgbm1 \
    libxcb1 \
    libxkbcommon0 \
    libpango-1.0-0 \
    libcairo2 \
    libasound2t64 \
    libgtk-3-0 \
    libgdk-pixbuf-2.0-0 \
    libglib2.0-0 \
    fonts-liberation \
    libappindicator3-1 \
    libnss3-dev \
    libgdk-pixbuf2.0-dev \
    libgtk-3-dev \
    libxss1 \
    xdg-utils \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Playwright browsers (without --with-deps)
RUN playwright install chromium

# Development stage
FROM base as development

# Install development dependencies
RUN pip install --no-cache-dir -r requirements-dev.txt

# Copy source code
COPY --chown=harvester:harvester . .

# Switch to app user
USER harvester

# Expose ports
EXPOSE 8000 9091

CMD ["python", "-m", "src.cli", "status"]

# Production stage
FROM base as production

# Copy only necessary files
COPY --chown=harvester:harvester src/ ./src/
COPY --chown=harvester:harvester alembic/ ./alembic/
COPY --chown=harvester:harvester alembic.ini scrapy.cfg ./
COPY --chown=harvester:harvester config/ ./config/

# Switch to app user
USER harvester

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "from src.utils.health import check_system_health; import sys; sys.exit(0 if all(s['healthy'] for s in check_system_health().values()) else 1)"

# Expose port
EXPOSE 8000

# Default command
CMD ["python", "-m", "src.cli", "harvest", "start"]