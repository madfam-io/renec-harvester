name: Smoke Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  smoke-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: renec
          POSTGRES_PASSWORD: renec_secure_pass
          POSTGRES_DB: renec_harvester
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Install Playwright dependencies for Ubuntu 24.04
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libasound2t64 \
          libatk-bridge2.0-0 \
          libatk1.0-0 \
          libatspi2.0-0 \
          libcairo2 \
          libcups2 \
          libdbus-1-3 \
          libdrm2 \
          libgbm1 \
          libglib2.0-0 \
          libgtk-3-0 \
          libnspr4 \
          libnss3 \
          libpango-1.0-0 \
          libx11-6 \
          libx11-xcb1 \
          libxcb1 \
          libxcomposite1 \
          libxdamage1 \
          libxext6 \
          libxfixes3 \
          libxkbcommon0 \
          libxrandr2 \
          libxshmfence1 \
          xvfb \
          fonts-liberation \
          libu2f-udev \
          libvulkan1
        
    - name: Install Playwright browsers
      run: |
        playwright install chromium
    
    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://renec:renec_secure_pass@localhost:5432/renec_harvester
      run: |
        python -m alembic upgrade head
    
    - name: Test CLI commands
      env:
        DATABASE_URL: postgresql://renec:renec_secure_pass@localhost:5432/renec_harvester
        REDIS_URL: redis://localhost:6379/0
      run: |
        # Test help commands
        python -m src.cli --help
        python -m src.cli version
        python -m src.cli status
        
        # Test subcommands
        python -m src.cli crawl --help
        python -m src.cli harvest --help
        python -m src.cli validate --help
        python -m src.cli export --help
        python -m src.cli diff --help
    
    - name: Test spider initialization
      env:
        DATABASE_URL: postgresql://renec:renec_secure_pass@localhost:5432/renec_harvester
        REDIS_URL: redis://localhost:6379/0
      run: |
        # Test spider can be initialized
        scrapy list
        scrapy check renec
    
    - name: Test validation pipeline
      env:
        DATABASE_URL: postgresql://renec:renec_secure_pass@localhost:5432/renec_harvester
      run: |
        # Test validation with sample data
        python -c "
from src.validation import DataValidator, ValidationExpectations
validator = DataValidator()
test_item = {
    'ec_clave': 'EC0001',
    'titulo': 'Test Standard',
    'renec_url': 'https://conocer.gob.mx/test'
}
is_valid, errors = validator.validate_item(test_item)
assert is_valid, f'Validation failed: {errors}'
print('✅ Validation pipeline working')
        "
    
    - name: Test export functionality
      env:
        DATABASE_URL: postgresql://renec:renec_secure_pass@localhost:5432/renec_harvester
      run: |
        # Test export to JSON
        python -c "
from src.export import DataExporter
exporter = DataExporter()
# Test with empty database (should not fail)
path = exporter.export_to_json('test_export.json')
print(f'✅ Export test passed: {path}')
        "
    
    - name: Test diff engine
      env:
        DATABASE_URL: postgresql://renec:renec_secure_pass@localhost:5432/renec_harvester
      run: |
        # Test diff engine initialization
        python -c "
from src.diff import DiffEngine
from datetime import datetime, timedelta
engine = DiffEngine()
# Test with empty database (should handle gracefully)
report = engine.compare_harvests(
    datetime.now() - timedelta(days=1),
    datetime.now()
)
print('✅ Diff engine test passed')
        "
    
    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://renec:renec_secure_pass@localhost:5432/renec_harvester
        REDIS_URL: redis://localhost:6379/0
      run: |
        pytest tests/unit -v --no-header --tb=short || true
    
    - name: Check code quality
      run: |
        # Format check
        black --check src tests || true
        
        # Lint check
        ruff check src tests || true
        
        # Type check
        mypy src --ignore-missing-imports || true
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          test_export.json
          pytest-report.xml
        retention-days: 7

  integration-test:
    runs-on: ubuntu-latest
    needs: smoke-test
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        playwright install --with-deps chromium
    
    - name: Test RENEC connectivity
      run: |
        # Test that RENEC is accessible
        python -c "
import requests
try:
    response = requests.get('https://conocer.gob.mx/RENEC/', timeout=10)
    assert response.status_code == 200, f'RENEC returned {response.status_code}'
    print('✅ RENEC is accessible')
except Exception as e:
    print(f'⚠️  RENEC connectivity issue: {e}')
    exit(0)  # Don't fail the build
        "
    
    - name: Test spider crawl (limited)
      env:
        CONCURRENT_REQUESTS: "1"
        DOWNLOAD_DELAY: "2"
      run: |
        # Run spider with strict limits
        scrapy crawl renec -a mode=crawl -a max_items=5 -s CLOSESPIDER_ITEMCOUNT=5 || true