apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: renec-harvester
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093
    
    rule_files:
      - '/etc/prometheus/alerts/*.yml'
    
    scrape_configs:
      # API metrics
      - job_name: 'renec-api'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - renec-harvester
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
      
      # PostgreSQL exporter
      - job_name: 'postgres'
        static_configs:
          - targets: ['postgres-exporter:9187']
      
      # Redis exporter
      - job_name: 'redis'
        static_configs:
          - targets: ['redis-exporter:9121']
      
      # Node exporter
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-alerts
  namespace: renec-harvester
data:
  alerts.yml: |
    groups:
      - name: renec_harvester_alerts
        interval: 30s
        rules:
          # API alerts
          - alert: APIHighErrorRate
            expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.05
            for: 5m
            labels:
              severity: critical
            annotations:
              summary: "High API error rate"
              description: "API error rate is {{ $value }} errors per second"
          
          - alert: APIHighLatency
            expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 1
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High API latency"
              description: "95th percentile latency is {{ $value }} seconds"
          
          # Database alerts
          - alert: DatabaseConnectionsHigh
            expr: pg_stat_database_numbackends{datname="renec_harvester"} > 80
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High database connections"
              description: "Database has {{ $value }} active connections"
          
          - alert: DatabaseDown
            expr: up{job="postgres"} == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "PostgreSQL is down"
              description: "PostgreSQL database is not responding"
          
          # Harvest alerts
          - alert: HarvestFailed
            expr: increase(harvest_failures_total[1h]) > 0
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Harvest failed"
              description: "{{ $value }} harvest failures in the last hour"
          
          - alert: HarvestDurationHigh
            expr: harvest_duration_seconds > 1800
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Harvest taking too long"
              description: "Harvest has been running for {{ $value }} seconds"
          
          # Resource alerts
          - alert: PodMemoryUsageHigh
            expr: container_memory_usage_bytes{namespace="renec-harvester"} / container_spec_memory_limit_bytes > 0.9
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Pod memory usage high"
              description: "Pod {{ $labels.pod }} memory usage is {{ $value | humanizePercentage }}"
          
          - alert: PodCPUUsageHigh
            expr: rate(container_cpu_usage_seconds_total{namespace="renec-harvester"}[5m]) > 0.9
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Pod CPU usage high"
              description: "Pod {{ $labels.pod }} CPU usage is {{ $value | humanizePercentage }}"

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: renec-harvester
spec:
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090
  type: ClusterIP

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  namespace: renec-harvester
spec:
  serviceName: prometheus
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus'
          - '--storage.tsdb.retention.time=30d'
          - '--web.enable-lifecycle'
        ports:
        - containerPort: 9090
          name: web
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus/prometheus.yml
          subPath: prometheus.yml
        - name: alerts
          mountPath: /etc/prometheus/alerts
        - name: prometheus-storage
          mountPath: /prometheus
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      volumes:
      - name: config
        configMap:
          name: prometheus-config
      - name: alerts
        configMap:
          name: prometheus-alerts
  volumeClaimTemplates:
  - metadata:
      name: prometheus-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 50Gi

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: renec-harvester

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: renec-harvester